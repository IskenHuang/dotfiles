# Create a new directory and enter it
function md() {
	mkdir -p "$@" && cd "$@"
}


# find shorthand
function f() {
    find . -name "$1"
}


# Start an HTTP server from a directory, optionally specifying the port
function server() {
# 	local port="${1:-8000}"
# 	open "http://localhost:${port}/"
# 	# Set the default Content-Type to `text/plain` instead of `application/octet-stream`
# 	# And serve everything as UTF-8 (although not technically correct, this doesnâ€™t break anything for binary files)
# 	python -c $'import SimpleHTTPServer;\nmap = SimpleHTTPServer.SimpleHTTPRequestHandler.extensions_map;\nmap[""] = "text/plain";\nfor key, value in map.items():\n\tmap[key] = value + ";charset=UTF-8";\nSimpleHTTPServer.test();' "$port"
	# nodejs static server
	local port="${1:-3000}"
	open "http://localhost:${port}/"
	echo "Static file server running at => http://localhost:${port}"
	echo "CTRL + C to shutdown"
	node -e 'var http=require("http"),url=require("url"),path=require("path"),fs=require("fs"),port=process.argv[1]||3000,backName="<<",log=function(r,e){var t=200===e?"\x1b[32m":"\x1b[31m";console.log("\x1b[36m",r.method,t,e,"\x1b[0m",r.url)},errorResponse=function(r,e,t,n){var o={"Content-Type":"text/plain"},s=404===r?"404 Not Found\n":n+"\n";log(e,r),t.writeHead(r,o),t.write(s),t.end()},normalResponse=function(r,e,t,n){var o={"Access-Control-Allow-Origin":"*"};log(r,200),e.writeHead(200,o),e.write(t,n),e.end()};http.createServer(function(r,e){var t=url.parse(r.url).pathname,n=path.join(process.cwd(),t);fs.exists(n,function(t){if(!t)return void errorResponse(404,r,e);var o=fs.statSync(n).isDirectory();o?fs.readdir(n,function(t,o){if(t)return errorResponse(500,r,e,t);var s="<html><head><style>body{margin:0;}.content{list-style:none;padding:10px;}.row{height:30px;line-height:30px}.row:hover{background-color:#f1f1f1}</style></head><body><ul class=\"content\">",a=function(e,t){t=t||e;var n="<li class=\"row\">";return n+="<a href=\""+r.url+t+"\">",n+=e,n+="</a></li>"};s+="/"===r.url?"":a(backName,"..");for(var i=0;i<o.length;i++){var l=o[i];l+=fs.statSync(n+l).isDirectory()?"/":"",s+=a(l)}return s+="</ul></body></html>",normalResponse(r,e,s)}):fs.readFile(n,"binary",function(t,n){return t?errorResponse(500,r,e,t):normalResponse(r,e,n,"binary")})})}).listen(parseInt(port,10));' "$port"
}

# git log with per-commit cmd-clickable GitHub URLs (iTerm)
# function gf() {
#   local remote="$(git remote -v | awk '/^origin.*\(push\)$/ {print $2}')"
#   [[ "$remote" ]] || return
#   local user_repo="$(echo "$remote" | perl -pe 's/.*://;s/\.git$//')"
#   git log $* --name-status --color | awk "$(cat <<AWK
#     /^.*commit [0-9a-f]{40}/ {sha=substr(\$2,1,7)}
#     /^[MA]\t/ {printf "%s\thttps://github.com/$user_repo/blob/%s/%s\n", \$1, sha, \$2; next}
#     /.*/ {print \$0}
# AWK
#   )" | less -F
# }


# Copy w/ progress
cp_p () {
  rsync -WavP --human-readable --progress $1 $2
}


# Test if HTTP compression (RFC 2616 + SDCH) is enabled for a given URL.
# Send a fake UA string for sites that sniff it instead of using the Accept-Encoding header. (Looking at you, ajax.googleapis.com!)
function httpcompression() {
	encoding="$(curl -LIs -H 'User-Agent: Mozilla/5 Gecko' -H 'Accept-Encoding: gzip,deflate,compress,sdch' "$1" | grep '^Content-Encoding:')" && echo "$1 is encoded using ${encoding#* }" || echo "$1 is not using any encoding"
}

# Syntax-highlight JSON strings or files
function json() {
	if [ -p /dev/stdin ]; then
		# piping, e.g. `echo '{"foo":42}' | json`
		python -mjson.tool | pygmentize -l javascript
	else
		# e.g. `json '{"foo":42}'`
		python -mjson.tool <<< "$*" | pygmentize -l javascript
	fi
}

# prune a set of empty directories
function prunedir () {
   find $* -type d -empty -print0 | xargs -0r rmdir -p ;
}

# take this repo and copy it to somewhere else minus the .git stuff.
function gitexport(){
	mkdir -p "$1"
	git archive master | tar -x -C "$1"
}

# get gzipped size
function gz() {
	echo "orig size    (bytes): "
	cat "$1" | wc -c
	echo "gzipped size (bytes): "
	gzip -c "$1" | wc -c
}

# All the dig info
function digga() {
	dig +nocmd "$1" any +multiline +noall +answer
}

# Escape UTF-8 characters into their 3-byte format
function escape() {
	printf "\\\x%s" $(printf "$@" | xxd -p -c1 -u)
	echo # newline
}

# Decode \x{ABCD}-style Unicode escape sequences
function unidecode() {
	perl -e "binmode(STDOUT, ':utf8'); print \"$@\""
	echo # newline
}



# Launch installed browsers for a specific URL
# Usage: browsers "http://www.google.com"
function browsers(){
	chrome $1
	opera $1
	firefox $1
	safari $1
}

# Browserstack shortcuts, now with added hotness thanks to the Browserstack team.
# Note, a trial or paid for account is needed for this to work
# Usage: ipad3 "http://www.google.com", win7ie8 "http://www.google.com" etc.

# For local server running on port 3000, use like this
# Usage: ipad3 "http://localhost:3000" "localhost,3000,0", win7ie8 "http://localhost:3000" "localhost,3000,0" etc.

# For local server running on apache with ssl as staging.example.com and https://staging.example.com
# Usage: ipad3 "http://staging.example.com" "staging.example.com,80,0,staging.example.com,443,1", win7ie8 "http://staging.example.com" "staging.example.com,80,0,staging.example.com,443,1" etc.

function openurl(){
	if [ $2 ]
	then
	  url=$1"&host_ports=$2"
	fi
	open -a google\ chrome ${url}
}

# function androidnexus(){
# 	local url="http://www.browserstack.com/start#os=android&os_version=4.0.3&device=Samsung+Galaxy+Nexus&zoom_to_fit=true&url=$1&start=true"
# 	openurl $url $2
# }

# function ipad3(){
# 	local url="http://www.browserstack.com/start#os=ios&os_version=5.1&device=iPad+3rd&zoom_to_fit=true&resolution=1024x768&speed=1&url=$1&start=true"
# 	openurl $url $2
# }

# function ipad3ios6(){
# 	local url="http://www.browserstack.com/start#os=ios&os_version=6.1&device=iPad+3rd&zoom_to_fit=true&resolution=1024x768&speed=1&url=$1&start=true"
# 	openurl $url $2
# }

# function ipad2(){
# 	local url="http://www.browserstack.com/start#os=ios&os_version=5.1&device=iPad+2nd&zoom_to_fit=true&resolution=1024x768&speed=1&url=$1&start=true"
# 	openurl $url $2
# }

# function win7ie8(){
# 	local url="http://www.browserstack.com/start#os=Windows&os_version=7&browser=IE&browser_version=8.0&zoom_to_fit=true&resolution=1024x768&speed=1&url=$1&start=true"
# 	openurl $url $2
# }

# function win7ie9(){
# 	local url="http://www.browserstack.com/start#os=Windows&os_version=7&browser=IE&browser_version=9.0&zoom_to_fit=true&resolution=1024x768&speed=1&url=$1&start=true"
# 	openurl $url $2
# }

# function win8ie10(){
# 	local url="http://www.browserstack.com/start#os=Windows&os_version=8&browser=IE&browser_version=10.0&zoom_to_fit=true&resolution=1024x768&speed=1&url=$1&start=true"
# 	openurl $url $2
# }

# function winxpie8(){
# 	local url="http://www.browserstack.com/start#os=Windows&os_version=XP&browser=IE&browser_version=8.0&zoom_to_fit=true&resolution=1024x768&speed=1&url=$1&start=true"
# 	openurl $url $2
# }

# function winxpie7(){
# 	local url="http://www.browserstack.com/start#os=Windows&os_version=XP&browser=IE&browser_version=7.0&zoom_to_fit=true&resolution=1024x768&speed=1&url=$1&start=true"
# 	openurl $url $2
# }

# function winxpie6(){
# 	local url="http://www.browserstack.com/start#os=Windows&os_version=XP&browser=IE&browser_version=6.0&zoom_to_fit=true&resolution=1024x768&speed=1&url=$1&start=true"
# 	openurl $url $2
# }

# function win7chrome(){
# 	local url="http://www.browserstack.com/start#os=Windows&os_version=7&browser=Chrome&browser_version=21.0&zoom_to_fit=true&resolution=1024x768&speed=1&url=$1&start=true"
# 	openurl $url $2
# }

# function win7ff(){
# 	local url="http://www.browserstack.com/start#os=Windows&os_version=7&browser=Firefox&browser_version=16.0&zoom_to_fit=true&resolution=1024x768&speed=1&url=$1&start=true"
# 	openurl $url $2
# }

