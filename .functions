# find shorthand
function f() {
    find . -name "$1"
}

# Start an HTTP server from a directory, optionally specifying the port
function server() {
	local port="${1:-9000}"
	local ip="$(ifconfig en0 | grep inet | grep -v inet6 | awk '{print $2}')"
	open "http://${ip}:${port}/"

	# Set the default Content-Type to `text/plain` instead of `application/octet-stream`
	# And serve everything as UTF-8 (although not technically correct, this doesnâ€™t break anything for binary files)
	if [ $port -eq "80" ]
	then
		sudo python -c $'import SimpleHTTPServer;\nmap = SimpleHTTPServer.SimpleHTTPRequestHandler.extensions_map;\nmap[""] = "text/plain";\nfor key, value in map.items():\n\tmap[key] = value + ";charset=UTF-8";\nSimpleHTTPServer.test();' "$port"
	else
		python -c $'import SimpleHTTPServer;\nmap = SimpleHTTPServer.SimpleHTTPRequestHandler.extensions_map;\nmap[""] = "text/plain";\nfor key, value in map.items():\n\tmap[key] = value + ";charset=UTF-8";\nSimpleHTTPServer.test();' "$port"
	fi
}

# get gzipped size
function gz() {
	echo "orig size    (bytes): "
	cat "$1" | wc -c
	echo "gzipped size (bytes): "
	gzip -c "$1" | wc -c
}

# All the dig info
function digga() {
	dig +nocmd "$1" any +multiline +noall +answer
}

# Escape UTF-8 characters into their 3-byte format
#function escape() {
#	printf "\\\x%s" $(printf "$@" | xxd -p -c1 -u)
#	echo # newline
#}

# Decode \x{ABCD}-style Unicode escape sequences
#function unidecode() {
#	perl -e "binmode(STDOUT, ':utf8'); print \"$@\""
#	echo # newline
#}

# For local server running on apache with ssl as staging.example.com and https://staging.example.com
# Usage: ipad3 "http://staging.example.com" "staging.example.com,80,0,staging.example.com,443,1", win7ie8 "http://staging.example.com" "staging.example.com,80,0,staging.example.com,443,1" etc.

#function openurl(){
#	if [ $2 ]
#	then
#	  url=$1"&host_ports=$2"
#	fi
#	open -a google\ chrome ${url}
#}
